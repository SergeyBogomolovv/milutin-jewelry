services:
  migrate:
    build:
      context: ./api
      dockerfile: build/migrate.Dockerfile
    container_name: migrate
    command: ['-path', '/migrations', '-database', '${POSTGRES_URL}', 'up']
    environment:
      - POSTGRES_URL=${POSTGRES_URL}
    depends_on:
      postgres:
        condition: service_healthy

  web:
    build:
      context: ./web
    container_name: web
    restart: unless-stopped
    ports:
      - 3000:3000
    environment:
      - API_URL=${API_URL}
      - NEXT_PUBLIC_IMAGE_URL=${NEXT_PUBLIC_IMAGE_URL}
    depends_on:
      minio:
        condition: service_healthy

  admin:
    build:
      context: ./admin
    container_name: admin
    restart: unless-stopped
    ports:
      - 4000:4000
    environment:
      - API_URL=${API_URL}
      - JWT_SECRET=${JWT_SECRET}
      - NEXT_PUBLIC_IMAGE_URL=${NEXT_PUBLIC_IMAGE_URL}
    depends_on:
      minio:
        condition: service_healthy

  api:
    build:
      context: ./api
      dockerfile: build/Dockerfile
    container_name: api
    restart: unless-stopped
    ports:
      - 8080:8080
    environment:
      - PORT=${API_PORT}
      - POSTGRES_URL=${POSTGRES_URL}
      - REDIS_URL=${REDIS_URL}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USER=${MAIL_USER}
      - MAIL_PASS=${MAIL_PASS}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - OBJECT_STORAGE_ACCESS=${OBJECT_STORAGE_ACCESS}
      - OBJECT_STORAGE_SECRET=${OBJECT_STORAGE_SECRET}
      - OBJECT_STORAGE_ENDPOINT=${OBJECT_STORAGE_ENDPOINT}
      - OBJECT_STORAGE_BUCKET=${OBJECT_STORAGE_BUCKET}
      - OBJECT_STORAGE_REGION=${OBJECT_STORAGE_REGION}
      - JWT_TTL=${JWT_TTL}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    image: postgres:alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} || exit 1']
      interval: 1s
      timeout: 5s
      retries: 3

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 1s
      timeout: 5s
      retries: 3

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_REGION_NAME=${OBJECT_STORAGE_REGION}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  minio-init:
    image: minio/mc
    container_name: minio-init
    depends_on:
      - minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}); do
        echo 'Waiting for MinIO...'; sleep 2;
      done;
      /usr/bin/mc mb -p local/jewellery || true;
      /usr/bin/mc anonymous set download local/jewellery;
      echo 'Bucket jewellery ready with anonymous download';
      exit 0;
      "

volumes:
  pgdata:
  minio_data:
